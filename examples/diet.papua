with (require './lib/orm2.js') as orm
  [ condition
  , toInt
  ]
with (console)
  [ log
  ]
with (require './web.coffee') as web
  [ wordToUri
  ]
with (require 'nodam') as nodam
  [ result
  , failure
  , combine
  , combineStrict
  ]

with (nodam._) as $
  [ map
  // , setVar = set
  ] 

Error.stackTraceLimit = Infinity

process.on 'error' \err ->
  log err.stack

db    = require './model.js'

qs    = require 'querystring'
jade  = require 'jade'
util  = require 'util'

fs    = nodam.fs()
M     = nodam.Maybe
Async = nodam.Async

// nodam.debug true

GET    = 'GET'
POST   = 'POST'
PUT    = 'PUT'
DELETE = 'DELETE'

dbM     = db.dbM
queries = db.queries
fmap    = $.flip map

foodUrl = \food -> '/food/' + wordToUri food.name
mealUrl = \meal -> '/meal/' + meal.id
planUrl = \plan -> '/plan/' + wordToUri plan.name
weekUrl = \week -> '/week/' + wordToUri week.name

web.helper.foodUrl = foodUrl
web.helper.mealUrl = mealUrl
web.helper.planUrl = planUrl
web.helper.weekUrl = weekUrl

apology = 'Sorry, there was a problem with your request.'

// for now, do nothing here
logError = \err ->
  log err
  log err.stack
  result()

createFood = \post ->
  runQuery queries.foods_insert
      { name: post.food_name
      , type: post.food_type
      , cals: post.food_cals || ''
      , grams: post.food_grams || ''
      }

updateFood = \post ->
  food_id = post.update
  if ! food_id
    failure 'No food exists with that ID.'
  else
    data  =
      { name: post['food_name_' + food_id]
      , type: post['food_type_' + food_id]
      , id: food_id
      }
    cals  = post['food_cals_' + food_id]
    grams = post['food_grams_' + food_id]

    if cals
      data.cals = cals
      templ     = queries.food_update_cals
    else if grams
      data.grams = grams
      templ      = queries.food_update_grams

    runQuery templ data
      . then (getFood food_id)
      . pipeMaybe
          (failure 'An unknown error occured.')
          updateFoodCals


deleteIngredient = \post food ->
  query = 'DELETE FROM ingredients ' + condition
    { food_id: food.id
    , ingredient_id: post['delete']
    }

  run query .then # updateFoodCals food

addIngredient = \post food ->
  food `addIngredient`  post.ingName (toInt # post.grams || 0)
    .rescue \ ->
        web.error403 # 'No ingredient called "' + post.ingName + '" was found.'

updateIngredient = \post food ->
  cond =
    { food_id: post.food_id
    , grams: post.grams
    , ingred_id: post.update
    }

  runQuery queries.ingredients_update cond .then #
    updateFoodCals food

createMealFood = \meal post ->
  if !meal.id
    failure 'No meal with that ID exists.'
  else
    post_grams  = toInt (post.grams || 0)
    foodM       = foodByName post.foodName
    noFoodM     = failure # 'We have no food called "' + post.foodName + '"'

    food <- foodM.pipeMaybe noFood

    insertM     = runQuery queries.mealFoodsInsert
        { meal_id: meal.id
        , food_id: food.id
        , grams: post_grams
        }

    mMealFood <- getMealFood meal.id food.id .pipe

    // if meal food exists, add the grams of the new entry to that
    updateM = runQuery queries.mealFoodsUpdate
        { meal_id: meal.id
        , food_id: food.id
        , grams: m_meal_food.fromJust().grams + post_grams
        }

    if mMealFood.isNothing()
      insertM
    else
      updateM

/* FIXME: 'if-then' should be valid anywhere an expression is used,
 * but this doesn't work:
    runQuery #
      if m_meal_food.isNothing()
        insertQuery
      else
        updateQuery
 */
  
updateMealFood = \meal post ->
  runQuery queries.meal_foods_update
    { meal_id: meal.id
    , food_id: post.update
    , grams: post.grams
    }

createPlan = \post ->
  if post.name
    insertQuery = queries.plans_insert { name: post.name }
    getQuery    = queries.plans + condition
        { id: orm.literal 'last_insert_rowid()' }

    runQuery insertQuery {}
      .then # db.getOrFail getQuery
  else
    failure 'Invalid form submission.'

addMealToPlan = \post plan ->
  if ! post.meal_name
    failure 'Invalid form submission.'

  else
    meal <- mealByName post.meal_name .pipeMaybe #
      failure 'No meal exists by that name'

    runQuery queries.plan_meals_insert
        { plan_id: plan.id
        , meal_id: meal.id
        , ordinal: post.ord }

removeMealFromPlan = \post plan ->
  if post.removeMeal
    run # 'DELETE FROM plan_meals' + condition { id: post.removeMeal }
  else
    failure 'Invalid form submission.'

reorderPlanMeals = \post plan ->
  db.reorderPlanMeals plan # post.ords `map` toInt


getLatestMeal = db.get # queries.meals +
  condition { id: orm.literal 'last_insert_rowid()' }

createWeek = \post ->
  if post.name
    runQuery queries.weeks_insert { name: post.name }
      .then
        db.getOrFail # queries.weeks +
          condition { id: orm.literal 'last_insert_rowid()' }
  else
    failure 'Invalid form submission.'

getMatchedWeek = \match ->
  if ! match.1
    failure()
  else
    plan_name = match.1 && web.uriToWord match.1
    db.get # db.queries.weeks + condition { name: plan_name }

updateWeek = \post week ->
  post.plans `Async.mapM` \planId i ->
    db.setWeekPlan week (i+1) (toInt planId)

setNutrient = \member nutrient ->
  \food ->
      orm.foodNutrient food nutrient .mmap \nuts ->
          food.set member nuts

actions =
  { root: \match ->
      carbsNut <- orm.Nutrient.get { name: 'carbohydrates' } .pipeMaybe
          (web.error403 'WTF?! Recreate "carbohydrates" nutrient.')

      foods <- orm.allFoods .pipeMapM (setNutrient 'carbs' carbsNut) .pipe
      web.showView 'foods' {foods: foods}

  /*
      setCarbs = \food ->
          carbs <- orm.foodNutrient food carbsNut .mmap
          food.set 'carbs' carbs

      foods <- orm.allFoods.pipeMapM setCarbs .pipe
      web.showView 'foods' {foods: foods}
  */

  , food: \match ->
      a := b
      post <- web.getPost.pipe

      changes = if case
        post['delete'] ->  db.deleteFood post['delete']
        post.create    -> createFood post
        post.update    -> updateFood post
        default        -> result() // if nothing to do, send back to main page


      changes.then # web.redirect '/'

  , ingredients: \match ->
      food_name = match.1 && web.uriToWord match.1
      if ! food_name
        return web.error404

      food <- db.foodByName food_name .pipeMaybe web.error404

      if food.type != 'dish'
        food2 <- db.ingredientsForFood food .pipe
        web.showView 'ingredients'
            { ingredients: food2.ingredients
            , food: food2
            , food_url: foodUrl food2
            }
      else
        result (food.name + ' has no ingredients.')

  , manageIngredients: \match ->
      food_name = match.1 && web.uriToWord match.1

      if ! food_name
        return web.error404

      post <- web.getPost.pipe
      food <- db.foodByName food_name .pipeMaybe #
        web.error403 ('No such food: ' + food_name)

      changes =
        if 'dish' != food.type
          web.error403 # food_name + ' cannot have ingredients.'
        else if post['delete']
          deleteIngredient post food
        else if post.create
          addIngredient post food
        else if post.update
          updateIngredient post food
        else
          web.error403 'Invalid form submission.'

      changes.then # web.redirect match.0

  , meals: \match ->
      meals <- db.allMeals.pipe
      fmeals <- Async.mapM meals db.fillMealFoods .pipe
      web.showView 'meals' { meals: fmeals }

  , manageMeals: \match ->
      db_obj post <- combineStrict [dbM, web.getPost] .pipeArray

      if post['delete']
        db.deleteMeal post['delete']
          .then # web.redirect '/meals'

      else if post.create
        db.runQuery queries.meals_insert { name: post.name }
          .then getLatestMeal
          .pipeMaybe 
            (web.error403 apology)
            \meal -> web.redirect (mealUrl meal)

      // if nothing to do, send back to meals
      else
        web.redirect '/meals'

  , meal: \match ->
      if ! match.1
        return web.error404

      meal <- db.mealById match.1 .pipeMaybe web.error404
      mealFilled <- db.fillMealFoods meal .pipe
      ingreds <- db.mealIngredients meal .pipe

      web.showView 'meal'
        { meal_foods: mealFilled.foods
        , meal: mealFilled
        , ingredients: ingreds
        }

  , mealFoods: \match ->
      meal_id = match.1
      if ! meal_id
        return web.error404

      db_obj post <- combineStrict [dbM, web.getPost] .pipeArray

      db.mealById meal_id .pipeMaybe
        (failure 'No meal with that id: ' + meal_id)
        (\meal ->
            if post.meal_name
              db.updateMealName meal post.meal_name
            else if post['delete']
              db.deleteMealFood meal post['delete']
            else if post.create
              createMealFood meal post
            else if post.update
              updateMealFood meal post
            else
              failure 'Invalid form submission.'
        )

        .then (web.redirect match.0)
        .rescue \err ->
            logError err .then (web.error403 err)

  , foodList: \match ->
      term = match.2
      m =
        if term
          db.allQ db.queries.food_list { term: term } .mmap \rows ->
            // names = map (rows || []) (@.name)
            names = (rows || []) `map` \row -> row.name
            JSON.stringify names
        else
          result ''
      
      m.pipe web.success

  , plans: \match ->
      plans <- db.all queries.plans .pipe
      web.showView 'plans' { plans: plans }

  , planMeals: \match ->
      plan_name = match.1 && web.uriToWord match.1

      plan <- db.get (queries.plans + condition { name: plan_name })
        .pipeMaybe web.error403 ('No plan "' + plan_name + '" exists.')

      planMealsFilled <- db.getPlanMeals plan .pipeMapM (\p_meal ->
          meal <- db.fillMealFoods p_meal.meal .mmap
          $.set p_meal 'meal' meal
        ) .pipe

      planFilled = $.set plan 'p_meals' planMealsFilled

      all_meals <- db.allMeals.pipe
      ingreds <- db.planIngredients plan .pipe

      web.showView 'plan'
        { plan: db.setPlanCals planFilled
        , all_meals: all_meals
        , ingredients: ingreds
        }

  , managePlan: \match ->

      db_obj post <- combineStrict [dbM, web.getPost] .pipeArray

      if post['delete']
        db.deletePlan post['delete']
          .then # web.redirect '/plans'
      else if post.create
        new_plan <- createPlan post .pipe
        web.redirect (planUrl new_plan)
      else
        plan_name = match.1 && web.uriToWord match.1

        changePlanM =
            plan <- db.get (queries.plans + condition { name: plan_name })
              .pipeMaybe # failure ('No plan with that name: ' + plan_name)

            if post.rename && post.plan_name
              plan1 <- db.renamePlan plan post.plan_name .pipe
              web.redirect (planUrl plan1)
            else if post.reorder
              reorderPlanMeals post plan .then (web.success 'OK')
            else
              m =
                if post.update
                  updatePlan post plan
                else if post.addMeal
                  addMealToPlan post plan
                else if post.removeMeal
                  removeMealFromPlan post plan
                else
                  failure 'Invalid form submission.'

              m.then (web.redirect match.0)
          
        changePlanM.rescue web.error403

  , weeks: \match ->
      weeks <- db.all queries.weeks .pipe
      web.showView 'weeks' { weeks: weeks }

  , week: \match ->
      week <- getMatchedWeek match .pipeMaybe web.error404
      w_plans <- db.getWeekPlans week .pipe
      ingredients <- db.weekIngredients week .pipe
      all_plans <- db.all queries.plans .pipe

      web.showView 'week'
        { week_plans: w_plans
        , all_plans: all_plans
        , week: week
        , ingredients: ingredients
        }

  , manageWeek: \match ->
      db_obj post <- combineStrict [dbM, web.getPost] .pipeArray
      if post['delete']
        db.deleteWeek post['delete']
          .then (web.redirect '/weeks')
      else if post.create
        new_week <- createWeek post .pipe
        web.redirect (weekUrl new_week)
      else
        week_name = match.1 && web.uriToWord match.1

        db.get (queries.weeks + condition {name: week_name}) .pipeMaybe
          (failure ('No week with that name: ' + week_name))
          (\week ->
            if post.rename && post.week_name
              week1 <- db.renameWeek week post.week_name .pipe
              web.redirect (weekUrl week1)
            else if post.update
              updateWeek post week .then (web.redirect match.0)
            else
              failure 'Invalid form submission.'
          )
          .rescue web.error403


  , weekUpdate: \match ->
      db_obj post <- combineStrict [dbM, web.getPost] .pipeArray

      db.setWeekPlan
        (toInt post.week_id)
        (toInt post.ord)
        (toInt post.plan_id)

        .then redirect match.0
        .rescue web.error403

  , createWeek: (match) ->
      db_obj post <- combineStrict [dbM, web.getPost] .pipeArray
      newWeek = ?? post.create
        : createWeek post
        : failure 'Invalid form submission.'

      newWeek.pipe (\week -> web.redirect # weekUrl week)
        .rescue web.error403

  , nutrients: \match ->
      nutnts <- orm.Nutrient.find().pipe
      web.showView 'nutrients' { nutrients: nutnts }

  , nutrient: \match ->
      nutrient <- orm.nutrientWithFoods { n_name: match.1 }
        .pipeMaybe web.error404

      web.showView 'nutrient'
        { f_nutrients: nutrient.food_nutrients
        , nutrient: nutrient
        }

  }
  /*

  manageNutrient: (match) ->
    changes = web.getPost.pipe (post) ->
      if post['delete']
        orm.deleteNutrient post['delete']
      else if post.create
        orm.createNutrient post.name
      else
        # if nothing to do, send back to main page
        result()

    changes.then web.redirect('/nutrients')

  foodNutrients: (match) ->
    food_name = web.uriToWord match[1]

    orm.Food.get({ name: food_name }).pipeMaybe \
      web.error404,
      (food) ->
        orm.foodNutrients(food).pipe (nutnts) ->
          web.showView('foodNutrients',
            f_nutrients: nutnts
            food: food
          )

  nutrientsPerCal: (match) ->
    food_name = web.uriToWord match[1]

    orm.Food.get({ name: food_name }).pipeMaybe \
      web.error404,
      (food) ->
        orm.foodNutrients(food).pipe (nutnts) ->
          web.showView('nutrientsPerCalorie',
            f_nutrients: nutnts
            food: food
          )

  manageFoodNutrients: (match) ->
    web.getPost.pipe (post) ->
      food_name = web.uriToWord match[1]

      orm.Food.get({ name: food_name }).pipeMaybe(
        web.error403('Could not find food: ' + match[1]),
        (food) ->
          orm.foodNutrients(food).pipe (nutnts) ->
            if post['delete']
              orm.deleteFoodNutrient(food, post['delete'])
            else if post.create
              orm.createFoodNutrient(food, post.name, post.amount)
            else
              # if nothing to do, send back to main page
              result()
      ).then web.redirect('/nutrientsin/' + match[1])
        .rescue (err) ->
          logError(err).then(web.error403 err)

  mealNutrients: (match) ->
    meal_name = web.uriToWord match[1]
    orm.Meal.get({ name: meal_name }).pipeMaybe(
      web.error403('could not find meal ' + meal_name),
      (meal) ->
        orm.allNutrientsIn(orm.mealIngredients(meal)).pipe (amts) ->
          web.showView('mealNutrients', {
            meal: meal
            amts: amts
          })
    )

  planNutrient: (match) ->
    plan_name = web.uriToWord match[1]
    nut_name = web.uriToWord match[2]
    orm.Plan.get({ name: plan_name }).pipeMaybe(
      web.error403('could not find ' + plan_name),
      (plan) ->
        orm.Nutrient.get({ name: nut_name }).pipeMaybe(
          web.error403('could not find ' + nut_name),
          (nutrient) ->
            orm.planNutrientAmount(plan, nutrient).pipe (amount) ->
              web.success(plan.name + ' has ' + amount + ' ' + nut_name)
        )
    )

  nutrientRatio2: (match) ->
    nut1_m = orm.Nutrient.get({ name: match[1] })
    nut2_m = orm.Nutrient.get({ name: match[2] })
    food_m = orm.Food.get({ name: match[3] })

    combine([nut1_m, nut2_m, food_m]).pipeArray (m_nut1, m_nut2, m_food) ->
      if m_nut1.isNothing()
        web.error403('No such nutrient: ' + match[1])
      else if m_nut2.isNothing()
        web.error403('No such nutrient: ' + match[2])
      else if m_food.isNothing()
        web.error403('No such food: ' + match[3])
      else
        [nut1, nut2, food] = M.Maybe.concat([m_nut1, m_nut2, m_food])

        orm.nutrientPerNutrient(nut1.id, nut2.id, food.id).pipe (ratio) ->
          web.success(
            m_food.fromJust().name + ' has ' + ratio + ' ' +
            nut1.name + ' per ' + nut2.name
          )

  nutrientRatio: (match) ->
    orm.Nutrient.get({ name: match[1] }).pipeMaybe \
      web.error403('No such nutrient: ' + match[1]),
      (nut1) ->
        orm.Nutrient.get({ name: match[2] }).pipeMaybe \
        web.error403('No such nutrient: ' + match[2]),
        (nut2) ->
          food_m = orm.Food.get({ name: match[3] }).pipeMaybe \
            web.error403('No such food: ' + match[3]),
            (food) ->
              orm.nutrientPerNutrient(nut1.id, nut2.id, food.id).pipe (ratio) ->
                web.success(
                  m_food.fromJust().name + ' has ' + ratio + ' ' +
                  nut1.name + ' per ' + nut2.name
                )

  ratioRanking: (match) ->
    orm.Nutrient.get({ name: match[1] }).pipeMaybe \
      web.error403('No such nutrient: ' + match[1]),
      (nut1) ->
        orm.Nutrient.get({ name: match[2] }).pipeMaybe \
        web.error403('No such nutrient: ' + match[2]),
        (nut2) ->
          orm.ratioRank(nut1.id, nut2.id).pipe (food_ratios) ->
            web.showView('ratioRank', {
              nutrient_1: nut1
              nutrient_2: nut2
              food_ratios: food_ratios
            })


  staticFile: (match) ->
    serveFile match[0]
}

mimeTypes = {
  html: 'text/html',
  jpeg: 'image/jpeg',
  jpg: 'image/jpeg',
  png: 'image/png',
  js: 'text/javascript',
  css: 'text/css'
}

path = require('path')

endsWith = (str, suffix) ->
  str.indexOf(suffix, str.length - suffix.length) != -1

serveCompressed = (file) ->
  getServePath =
    if endsWith(file, '.css') || endsWith(file, '.js')
      fs.exists(file + '.gz').pipe (bool) ->
        serve = if bool then file + '.gz' else file

        result serve
    else
      result file
      
  getServePath.pipe (serve) ->
    fileStream = fs.createReadStream(serve)

    nodam.get('response').pipe (resp) ->
      Async.listen(fileStream, 'error', (err) ->
        resp.status = 404
        resp.write 'File not found.'

        failure(resp.end())
      ).pipe ->
        mime = mimeTypes[path.extname(serve).substr(1)]

        resp.status = 200
        resp.setHeader('Content-Type', mime)
        result(fileStream.pipe resp)


serveFile = (file) ->
  filepath = __dirname + '/' + file

  serveCompressed(filepath)
*/

routes =
  [ [ '/',                   { GET: actions.root }]
  , [ /^\/food\/(.+)/,       { GET: actions.ingredients, POST: actions.manageIngredients }]
  , [ /^\/food(\/?)$/,       { POST: actions.food }]
  , [ /^\/meals(\/?)$/,      { GET: actions.meals }]
  , [ /^\/meal\/(\d+)/,      { GET: actions.meal, POST: actions.mealFoods }]
  , [ /^\/meal(\/?)$/,       { POST: actions.manageMeals }]
  , [ /^\/plans(\/?)$/,      { GET: actions.plans }]
  , [ /^\/plan(\/?)$/,       { POST: actions.managePlan }]
  , [ /^\/plan\/(.+)/,       { GET: actions.planMeals, POST: actions.managePlan }]
  , [ /^\/weeks(\/?)$/,      { GET: actions.weeks }]
  , [ /^\/week(\/?)$/,       { POST: actions.manageWeek }]
  , [ /^\/week\/(.+)/,       { GET: actions.week, POST: actions.manageWeek }]

  , [ /^\/nutrientsin\/(.+)/,   { GET: actions.foodNutrients, POST: actions.manageFoodNutrients }]
  , [ /^\/nutrientspercal\/(.+)/,   { GET: actions.nutrientsPerCal }]
  , [ /^\/nutrients(\/?)$/,      { GET: actions.nutrients }]
  , [ /^\/nutrient-ratio\/(.+)\/(.+)\/(.+)/, { GET: actions.nutrientRatio2 }]
  , [ /^\/nutrient-ratios\/(.+)\/(.+)/, { GET: actions.ratioRanking }]
  , [ /^\/nutrient(?:\/(.+)?)?/,       { GET: actions.nutrient, POST: actions.manageNutrient }]

  , [ /^\/meal-nutrients\/(.+)/, { GET: actions.mealNutrients }]
  , [ /^\/plan-nutrient\/(.+)\/(.+)/, { GET: actions.planNutrient }]


  , [ /^\/foodlist(\/?)\?term=(\w*)/, { GET: actions.foodList }]
  , [ /^\/(assets\/.*)/, { GET: actions.staticFile } ]
  ]

// nodam.http().createServer((request, response) ->
require 'http' . createServer (\request response ->
    routeM = web.routeRequest request routes . or web.error404
    onErr  = \err ->
        if err instanceof Error
            web.showMonadErr err
            response.write 'There was a problem with your request.'
            response.end()

    routeM.run $.inert onErr { request: request, response: response }

  ) . listen 1337 '127.0.0.1'


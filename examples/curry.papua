/*jshint node: true, noarg: false */
// we need to use arguments.callee for the makeStack, a debug tool

_ = require 'underscore'
_slice = Array.prototype.slice

mark$ = \f ->
  if f.marked
    undefined
  else
    f.body = f.toString()
    f.time = new Date().getTime()
    f.stack = new Error().stack
    f.marked = true

    f

markWrapper$ = \f original wrapper_name ->
  mark$ original
  f.wraps = original
  f.wrapper = wrapper_name


/* Stack-free recursion
 *
 * This will call your function in a loop. If the return value is an
 * instance of Recurse, the "args" attribute (an array) will be used
 * as the arguments to your function in the next loop. Otherwise,
 * the value is returned.
 */
var recurse, recursive

(\ ->
    Recurse = \args f ->
        this.args = args
        this.f = f

    recursive := \f ->
        g = \ ->
          result = new Recurse arguments
          do
            result = (result.f || f).apply null result.args
          while result instanceof Recurse

          result

        markWrapper$ g f 'recurse'
        g

    recurse := \args f ->
        new Recurse args f

  )()

  /*
x = 0
do
  x += 3
while x

while x
  print()

try
  blah
catch e
  show e
finally
  haha

switch x
  case 1, 2
    x
  default
    y

blah = \x ->
  @x = x
  */


/* Returns function that passes 'this' as first argument to f
** For attaching an already-defined function as an object method
*/
curryThis = \f ->
  g = \ ->
    if this == global
      throw new Error 'Cannot curry global object; you may be trying to ' +
        'pass an object method as an argument to a function. To do so, you ' +
        'need to bind the argument first, obj.method.bind(obj)'
    else
      $args = _slice.apply arguments
      $args.unshift this
      f.apply null $args

  markWrapper$ g f 'curryThis'

  g

/* Object-method version of "curry".  Returns a function that
 * calls the given method on its first argument, passing the given
 * arguments to it. Ex:
 *
 * responseType = method('setHeader', 'Content-Type');
 * // ...
 * responseType(server.response, 'text/html');
 */
method = \meth_name args ->
  if args && !(args instanceof Array)
    throw new TypeError 'The second argument of method() must be an array'

  else
    \obj /* , further args */ ->
      args = args || []
      if arguments.length > 1
        args = args.concat # _slice.call arguments 1

      obj[meth_name].apply obj args

methodOf = \obj meth_name ->
  \ ->
    obj[meth_name].apply obj arguments

/*
function madeAt(f) {
  if (! f) {
    throw new Error('not a function');
  } else if (! f._creation_stack) {
    if (! debugging()) {
      throw new Error('You need to call debug(true) to use madeAt()');
    } else {
      throw new Error('Function has no makeStack! ' +
        'Call makeStack() on the lambda function where it is created.'
      );
    }
  } else {
    return f._creation_stack.split(/\n\s+at\s+/)[2];
  }
}

function makeStack(f) {
  if (! f._creation_stack && debugging()) {
    f._creation_stack = (new Error()).stack;
    f._maker = arguments.callee.caller;
    f._made_at = madeAt(f);
  }

  return f;
}
*/

/* Returns function that takes it's first two arguments
 * in reverse order
 */
flip = \f ->
  \ /* x, y */ ->
    $args = _slice.apply arguments
    a = $args[0]
    $args[0] = $args[1]
    $args[1] = a

    f.apply undefined $args

/* Reorders arguments to _.reduce, to make it more
 * functional-friendly
 */
fold = \f memo list ->
  _.reduce list f memo undefined

sum = _.partial fold (\memo x ->
      memo + x
  ) 0

and = _.partial (flip _.all) _.identity
or  = _.partial (flip _.any) _.identity

forall = flip _.every

fmap = \f obj ->
  ?? obj && obj.fmap
    : obj.fmap f
    : _.map obj f

// function that always returns x
constant = \x -> \-> x

// a function that does nothing
inert = \ -> undefined

iterate = \f start n ->
  if n <= 0
    []
  else
    $val = start
    $result = []

    for i = 0; i < n; i++
      $result.push $val
      $val = f $val

    $result

repeat = \n x ->
  _.range n .map \-> x

/**
 * Returns a copy of the object, with the given key set to the given val
 */
set = \obj key val ->
  $cp = _.clone obj
  $cp[key] = val

  $cp

/*
 * Returns a function that passes it's argument list through g,
 * then calls f with that list
 */
mapArgs = \f g ->
  \ ->
    f.apply undefined # g (_slice.call arguments)

/**
 * pad list to certain length with undefineds
 */
pad = \len arr ->
  if arr.length < len
    arr.concat # _.repeat (len - arr.length) undefined
  else
    arr

/*
/**
 * Return a version of f that accepts at most
 * num_args_expected arguments.
 * Useful mapping/folding functions with optional arguments.
 *
 * Default: num_args_expected = 1
 */
// pare :: (a* -> b) -> Int -> (a* -> b)
pare = \f num_to_keep ->
  mapArgs f \args -> args.slice 0 num_to_keep

/**
 * Removes num_to_drop arguments from the
 * beginning of the argument list
 */
// nip :: (a* -> b) -> Int -> (a* -> b)
nip = \f num_to_drop ->
  mapArgs f \args -> args.slice num_to_drop

describeFunction = \f ->
  f.toString() +
    ?? f.wrapped
      : "\nWrapping: " + describeFunction(f)
      : ''

traceLambda = \f prefix ->
  if f.wraps && f.wraps.body
    traceLambda f.wraps ('-' + prefix)

Sizable =
  { size: \x -> x.constructor.size x
	, isZero: \x -> Sizable.size x === 0
  }

Point = {: Cartesian x y | Polar r theta :}
Point implements Sizable {
  size: \ p ->
    switch p.constructor
      case Cartesian
        p.x*p.x + p.y*p.y
      case Polar
        p.r
  }

/**
 * No "each" function, because that is for side effects,
 * which we don't want
 */
Stack = \head tail ->
  this.head = head
  this.tail = tail
  this.length = ?? tail  :  tail.length + 1  :  0


_.extend Stack.prototype
  { push: \x -> new Stack x this

  , at: \n ->
      $t = this, i = 0

      while $t.tail && i < n
        $t = $t.tail
        i++

      $t.head

  , each: \f ->
      $me = this.reverse()

      while $me.head != undefined
        f $me.head
        $me = $me.tail

  , map: \f ->
      $stack = new Stack()

      this.each \x ->
        $stack := $stack.push (f x)

      $stack

  , fold: \f memo ->
      if ! this.head
        memo
      else if ! this.tail
        f this.head memo
      else
        f this.head # this.tail.fold f memo

  , reverse: \ ->
      $reverse = new Stack(), $self = this, len = this.length

      for i = 0; i < len; i++
        $reverse = $reverse.push$self.head
        $self = $self.tail

      $reverse

  , flatten: \ ->
      // skip fold, for efficiency's sake
      $list = this.reverse(), $arr = []

      while undefined != $list.head
        $arr.push $list.head
        $list = $list.tail

      $arr
  }

toStack = \x ->
  len = x.length, $list = new Stack()

  for i = len - 1; i >= 0; --i
    $list = $list.push x[i]

  $list


lib = _.extend
  { curryThis: curryThis
  , method: method
  , methodOf: methodOf
  , mapArgs: mapArgs
  , flip: flip
  , pare: pare
  , nip: nip
  , pad: pad

  , recursive: recursive
  , recurse: recurse
  , fold: fold
  , forall: forall
  , and: and
  , or: or
  , sum: sum
  , repeat: repeat
  , iterate: iterate
  , constant: constant
  , inert: inert
  , fmap: fmap
  , set: set

  , describeFunction: describeFunction
  , mark$: mark$
  , markWrapper$: markWrapper$
  , makeStack: makeStack
  , madeAt: madeAt
  , traceLambda: traceLambda

  , Stack: Stack
  , toStack: toStack
  } _

/*
// debug flag stuff
(function() {
  var makesFunction = {
    compose:    _.compose,
    curryThis:  curryThis,
    method:     method,
    methodOf:   methodOf,
    mapArgs:    mapArgs,
    flip:       flip,
    pare:       pare,
    nip:        nip
  };

  var is_on = false;
  debug = function(bool) {
    is_on = bool;

    if (is_on) {
      // add makeStack functionality to functions that make functions
      _.each(makesFunction, function(f, name) {
        lib[name] = _.compose(makeStack, f);
      });
    } else {
      _.each(makesFunction, function(f, name) {
        lib[name] = f;
      });
    }
  }
  debugging = function() {
    return is_on;
  }
})();

lib.debug = debug;
lib.debugging = debugging;
*/

module.exports = lib


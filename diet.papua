with (require './lib/orm2.js') as orm
  [ condition
  , toInt
  ]
with (console)
  [ log
  ]
with (require './web.coffee') as web
  [ wordToUri
  ]

Error.stackTraceLimit = Infinity

process.on 'error' \err ->
  log err.stack

db    = require './model.js'

nodam = require 'nodam'
qs    = require 'querystring'
jade  = require 'jade'
util  = require 'util'

$     = nodam._
fs    = nodam.fs()
M     = nodam.Maybe
Async = nodam.Async

// nodam.debug true

GET    = 'GET'
POST   = 'POST'
PUT    = 'PUT'
DELETE = 'DELETE'

dbM     = db.dbM
queries = db.queries
fmap    = $.flip $.map

foodUrl = \food -> '/food/' + wordToUri food.name
mealUrl = \meal -> '/meal/' + meal.id
planUrl = \plan -> '/plan/' + wordToUri plan.name
weekUrl = \week -> '/week/' + wordToUri week.name

web.helper.foodUrl = foodUrl
web.helper.mealUrl = mealUrl
web.helper.planUrl = planUrl
web.helper.weekUrl = weekUrl

apology = 'Sorry, there was a problem with your request.'

// for now, do nothing here
logError = \err ->
  log err
  log err.stack
  nodam.result()

createFood = \post ->
  runQuery queries.foods_insert
      { name: post.food_name
      , type: post.food_type
      , cals: post.food_cals || ''
      , grams: post.food_grams || ''
      }

updateFood = \post ->
  food_id = post.update
  if ! food_id
    failure 'No food exists with that ID.'
  else
    data  =
      { name: post['food_name_' + food_id]
      , type: post['food_type_' + food_id]
      , id: food_id
      }
    cals  = post['food_cals_' + food_id]
    grams = post['food_grams_' + food_id]

    if cals
      data.cals = cals
      templ     = queries.food_update_cals
    else if grams
      data.grams = grams
      templ      = queries.food_update_grams

    runQuery templ data
      . then (getFood food_id)
      . pipeMaybe
          (failure 'An unknown error occured.')
          updateFoodCals


deleteIngredient = \post food ->
  query = 'DELETE FROM ingredients ' + condition
    { food_id: food.id
    , ingredient_id: post['delete']
    }

  run query .then # updateFoodCals food

addIngredient = \post food ->
  food `addIngredient`  post.ingName (toInt # post.grams || 0)
    .rescue \ ->
        web.error403 # 'No ingredient called "' + post.ingName + '" was found.'

updateIngredient = \post food ->
  cond =
    { food_id: post.food_id
    , grams: post.grams
    , ingred_id: post.update
    }

  runQuery queries.ingredients_update cond .then #
    updateFoodCals food

createMealFood = \meal post ->
  if !meal.id
    failure 'No meal with that ID exists.'
  else
    post_grams  = toInt (post.grams || 0)
    foodM       = foodByName post.foodName
    noFoodM     = failure # 'We have no food called "' + post.foodName + '"'

    food <- foodM.pipeMaybe noFood

    insertM     = runQuery queries.mealFoodsInsert
        { meal_id: meal.id
        , food_id: food.id
        , grams: post_grams
        }

    mMealFood <- getMealFood meal.id food.id .pipe

    // if meal food exists, add the grams of the new entry to that
    updateM = runQuery queries.mealFoodsUpdate
        { meal_id: meal.id
        , food_id: food.id
        , grams: m_meal_food.fromJust().grams + post_grams
        }

    if mMealFood.isNothing()
      insertM
    else
      updateM

/* FIXME: 'if-then' should be valid anywhere an expression is used,
 * but this doesn't work:
    runQuery #
      if m_meal_food.isNothing()
        insertQuery
      else
        updateQuery
 */
  
updateMealFood = \meal post ->
  runQuery queries.meal_foods_update
    { meal_id: meal.id
    , food_id: post.update
    , grams: post.grams
    }

createPlan = \post ->
  if post.name
    insertQuery = queries.plans_insert { name: post.name }
    getQuery    = queries.plans + condition
        { id: orm.literal 'last_insert_rowid()' }

    runQuery insertQuery {}
      .then # db.getOrFail getQuery
  else
    failure 'Invalid form submission.'

addMealToPlan = \post plan ->
  if ! post.meal_name
    failure 'Invalid form submission.'

  else
    meal <- mealByName post.meal_name .pipeMaybe #
      nodam.failure 'No meal exists by that name'

    runQuery queries.plan_meals_insert
        { plan_id: plan.id
        , meal_id: meal.id
        , ordinal: post.ord }

/*
	WHY THIS IS NOT OK: toInt x = parseInt x 10
	I wanted it, but it doesn't work, because of nullary functions.
	What does this following mean? 

	foo.bar = print(foo)

	It's ambiguous - could be setting foo.bar to the value
	returned by calling print now, or it could be a function
	that takes no arguments and calls that
*/

util = require 'util'

toInt = \x -> parseInt x 10

DBEmptyFailure = \query params ->
	@err = { query: q, params: xs }

DBEmptyFailure `util.inherits` nodam.AsyncFailure

DBMissingFailure = \table condition ->
  @err = { table: table, condition: condition }

DBMissingFailure `util.inherits` DBEmptyFailure

getDB = \file ->
	db <- (nodam.get 'db').pipe
	if db
		Async.result db
	else
		db_open <- (sql.database file).pipe
		nodam.set 'db' db_open

do
	x
while y

for x = 2; x<5; x++
	z

foo = if a
	b
else if c
	d
else if e
	f
else
	g

yoyo = switch a
	case 1:
		b
		b++
	case 2:
		c
	default:
		d

try
	a
catch b
	c
finally
	d

j = z[3]
k = {a: 2, b: 4, c: { y: 'asrt' } }

y = a # b 5 'yes'

